<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>12to12 News Radar</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Custom Styles -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            /* Changed background color to light blue */
            background-color: #e0f2fe;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        /* Simple spinner animation */
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #09f;
            animation: spin 1s ease infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="antialiased text-gray-800">

    <!-- Main Container -->
    <div class="container mx-auto p-4 md:p-8 max-w-4xl">

        <!-- Header Section -->
        <header class="mb-8 text-center">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-2">12to12 News Radar</h1>
            <p class="text-gray-600">Today's global headlines, updated every minute.</p>
            <div id="last-updated" class="text-sm text-gray-500 mt-2"></div>
        </header>

        <!-- Loading Spinner -->
        <div id="loader" class="flex justify-center items-center py-10">
            <div class="spinner"></div>
        </div>
        
        <!-- News Feed Container -->
        <main id="news-feed" class="space-y-6">
            <!-- News articles will be injected here by JavaScript -->
        </main>

    </div>
    
    <!-- Footer Section -->
    <footer class="text-center py-6">
        <p class="text-sm text-gray-500">Created for Malayala Manorama by Manuel George</p>
    </footer>


    <!-- JavaScript Logic -->
    <script>
        // DOM Element References
        const newsFeed = document.getElementById('news-feed');
        const loader = document.getElementById('loader');
        const lastUpdatedElement = document.getElementById('last-updated');

        // --- Configuration ---
        const RSS_PROXY_URL = 'https://api.rss2json.com/v1/api.json?rss_url=';
        const REFRESH_INTERVAL = 60000; // 1 minute

        // Array of curated, reliable news source RSS feeds.
        const NEWS_SOURCES = [
            'http://feeds.bbci.co.uk/news/world/rss.xml',
            'https://feeds.npr.org/1001/rss.xml',
            'https://www.theguardian.com/world/rss',
            'https://www.aljazeera.com/xml/rss/all.xml',
            'https://timesofindia.indiatimes.com/rssfeedstopstories.cms',
            'https://indianexpress.com/section/india/feed/',
            'https://www.hindustantimes.com/feeds/rss/india-news/rssfeed.xml',
            'https://feeds.feedburner.com/ndtvnews-top-stories'
        ];

        /**
         * Fetches, filters, and displays news from all sources.
         */
        async function fetchNews() {
            console.log('Fetching latest news from all sources...');
            showLoader();

            const fetchPromises = NEWS_SOURCES.map(url => fetch(RSS_PROXY_URL + encodeURIComponent(url)));

            try {
                const results = await Promise.allSettled(fetchPromises);
                let allArticles = [];

                for (const result of results) {
                    if (result.status === 'fulfilled') {
                        const response = result.value;
                        if (response.ok) {
                            const data = await response.json();
                            if (data.status === 'ok' && data.items) {
                                const sourceTitle = data.feed.title || 'Unknown Source';
                                const articlesWithSource = data.items.map(item => ({...item, source: sourceTitle }));
                                allArticles.push(...articlesWithSource);
                            }
                        } else {
                            console.error(`HTTP error for a feed: ${response.status} from ${response.url}`);
                        }
                    } else {
                        console.error('A fetch promise was rejected:', result.reason);
                    }
                }
                
                allArticles.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));

                const seenTitles = new Set();
                const uniqueArticles = allArticles.filter(article => {
                    const normalizedTitle = article.title.toLowerCase().replace(/[^a-z0-9]/g, '').substring(0, 50);
                    if (seenTitles.has(normalizedTitle)) {
                        return false;
                    } else {
                        seenTitles.add(normalizedTitle);
                        return true;
                    }
                });

                const now = new Date();
                const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
                const todayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);

                const filteredArticles = uniqueArticles.filter(article => {
                    const articleDate = new Date(article.pubDate);
                    return articleDate >= todayStart && articleDate <= todayEnd;
                });

                renderNews(filteredArticles);
                updateTimestamp();

            } catch (error) {
                console.error("A critical error occurred during fetch:", error);
            } finally {
                hideLoader();
            }
        }

        /**
         * Renders the fetched news articles to the page.
         * @param {Array} articles - An array of news article objects.
         */
        function renderNews(articles) {
            newsFeed.innerHTML = ''; 

            if (articles.length === 0) {
                newsFeed.innerHTML = `<div class="text-center text-gray-500 bg-white p-6 rounded-lg shadow-md">No news found for today yet. Check back later!</div>`;
                return;
            }

            articles.forEach(article => {
                const articleElement = document.createElement('article');
                articleElement.className = 'bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 flex items-start space-x-4';

                const description = cleanDescription(article.description);
                const category = getArticleCategory(article);
                
                let imageUrl = article.thumbnail;
                if (!imageUrl) {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(article.description, 'text/html');
                    const firstImg = doc.querySelector('img');
                    if (firstImg) {
                        imageUrl = firstImg.src;
                    }
                }

                let imageHtml = '';
                if (imageUrl && typeof imageUrl === 'string' && imageUrl.length > 0) {
                    imageHtml = `<div class="flex-shrink-0"><img src="${imageUrl}" alt="News thumbnail" class="w-24 h-24 object-cover rounded-md" onerror="this.onerror=null; this.parentElement.innerHTML = createFallbackIcon();"></div>`;
                } else {
                    imageHtml = `<div class="flex-shrink-0">${createFallbackIcon()}</div>`;
                }

                const contentHtml = `
                    <div class="flex-grow">
                        <a href="${article.link}" target="_blank" rel="noopener noreferrer">
                            <h2 class="text-xl font-bold mb-2 text-gray-800 hover:text-blue-600 transition-colors duration-300">${article.title}</h2>
                        </a>
                        <p class="text-gray-600 mb-4">${description}</p>
                        <div class="flex justify-between items-center text-sm text-gray-500">
                            <span class="font-semibold text-gray-700">${article.source.split(' - ')[0]}</span>
                            <a href="${article.link}" target="_blank" rel="noopener noreferrer" class="font-semibold text-blue-500 hover:underline">Read More &rarr;</a>
                        </div>
                         <div class="text-xs font-medium text-blue-600 bg-blue-100 inline-block px-2 py-1 rounded-full mt-2">
                            <span>${category}</span>
                         </div>
                    </div>`;
                
                articleElement.innerHTML = imageHtml + contentHtml;
                newsFeed.appendChild(articleElement);
            });
        }
        
        /**
         * Determines the category of an article based on its content.
         * @param {object} article - The article object from the feed.
         * @returns {string} The determined category.
         */
        function getArticleCategory(article) {
            const title = article.title.toLowerCase();
            const link = article.link.toLowerCase();
            const categories = (article.categories || []).map(c => c.toLowerCase());

            const check = (keywords) => keywords.some(kw => title.includes(kw) || link.includes(kw) || categories.includes(kw));

            if (check(['sport', 'cricket', 'football', 'ipl', 'olympic', 'tennis'])) return 'Sports';
            if (check(['entertainment', 'movie', 'film', 'music', 'bollywood', 'hollywood', 'celebrity'])) return 'Entertainment';
            if (check(['tech', 'gadget', 'ai', 'science', 'crypto', 'smartphone'])) return 'Technology';
            if (check(['business', 'economy', 'market', 'stock', 'finance'])) return 'Business';
            
            return 'Global News';
        }

        /**
         * Creates an HTML string for a fallback SVG icon.
         */
        function createFallbackIcon() {
            return `<div class="w-24 h-24 bg-gray-200 flex items-center justify-center rounded-md">
                        <svg class="w-10 h-10 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 0 1-2.25 2.25H6.75A2.25 2.25 0 0 1 4.5 18V6.375c0-.621.504-1.125 1.125-1.125H9.75" />
                        </svg>
                    </div>`;
        }

        /**
         * Removes HTML tags from the description string.
         */
        function cleanDescription(htmlString) {
            if (!htmlString) return '';
            const parser = new DOMParser();
            const doc = parser.parseFromString(htmlString, 'text/html');
            let text = doc.body.textContent || "";
            return text.trim().substring(0, 150) + (text.length > 150 ? '...' : '');
        }
        
        /**
         * Updates the "Last Updated" timestamp.
         */
        function updateTimestamp() {
            lastUpdatedElement.textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
        }

        // --- UI Helper Functions ---
        function showLoader() {
            loader.style.display = 'flex';
            newsFeed.style.display = 'none';
        }

        function hideLoader() {
            loader.style.display = 'none';
            newsFeed.style.display = 'block';
        }
        
        // --- Initial Load and Interval Setup ---
        function initialize() {
            fetchNews();
            setInterval(fetchNews, REFRESH_INTERVAL);
        }

        // Start the application
        initialize();
    </script>

</body>
</html>
